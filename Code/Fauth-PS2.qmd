---
title: "Problem Set 2"
author: "Aidan Fauth"
format: html
editor: visual
---

# Set up:

```{r}
rm(list = ls()) # clear 'R's brain'
library(tidyverse)
library(here)
```

Load in the data file:

```{r}
halloween <- read.csv(here("Data", "Halloween_data_PS2.csv")) # saved the data as halloween
```


## Q4. Examine the data frame:

Use two functions:

1) head() -- looks at first 6 values

```{r}
head(halloween)
```

2) glimpse() -- from the tidyverse package like head but shows more values and is oriented horizontally

```{r}
glimpse(halloween)
```

After examination: clearly there are errors in data entry (capitalization) and a lot of variables assigned as character data that will need to be changed to factor data.


## Q5 & Q6. Assign Data Types:

Change character data types to factored.

Start with costume:

```{r}
halloween$costume <-  as.factor(halloween$costume) # assign costume as a factor variable
levels(halloween$costume) # look at all the groups within the variable
```

Clearly, there was not any data validation on data entry. The entries need to be standardized.

Start with Princess:

```{r}
fixp <-  which(halloween$costume %in% c("princess", "Princess")) # find the rows that need to be standardized
halloween$costume[fixp] <-  "princess" # choose one name for the group
```

Unicorn:

```{r}
fixu <-  which(halloween$costume %in% c("unicorn", "Unicorn")) # find the rows that need to be standardized
halloween$costume[fixu] <-  "unicorn" # choose one name for the group
```

Witch:

```{r}
fixw <-  which(halloween$costume %in% c("witch", "Witch", "witch ")) # find the rows that need to be standardized
halloween$costume[fixw] <-  "witch" # choose one name for the group
```

Zombie:

```{r}
fixz <-  which(halloween$costume %in% c("zombie", "Zombie")) # find the rows that need to be standardized
halloween$costume[fixz] <-  "zombie" # choose one name for the group
```


Now, the variable needs to be re-factored for the changes to 'update.'

```{r}
halloween$costume <- factor(halloween$costume) # re-factor the variable
levels(halloween$costume) # check to see if all the errors were rectified
```

Now back to changing character variables to a factor variable 

Costume_type:

```{r}
halloween$Costume_type <-  as.factor(halloween$Costume_type) # assign as a factor variable
levels(halloween$Costume_type) # look at all the groups within the variable
```

More errors.

Not scary:

```{r}
# find the rows that need to be standardized
fixns <- which(halloween$Costume_type %in% c("not scary", "Not scary", "notscary")) 
halloween$Costume_type[fixns] <- "not scary" # choose one name for the entry
```

Scary:

```{r}
# find the rows that need to be standardized
fixs <- which(halloween$Costume_type %in% c("scary", "scaly", "Scary", "scary ")) 
halloween$Costume_type[fixs] <- "scary" # choose one name for the entry
```

Now, we can re-factor the variable and see the corrected levels.

```{r}
halloween$Costume_type <- factor(halloween$Costume_type) # re-factor the variable
levels(halloween$Costume_type) # check to see if all the errors were rectified
```

Back to factoring variables:

sugar_high:

```{r}
halloween$sugar_high <-  as.factor(halloween$sugar_high) # assign as a factor variable
levels(halloween$sugar_high) # look at all the groups within the variable
```

Fix errors.

No:

```{r}
# find the rows that need to be corrected
fixno <- which(halloween$sugar_high %in% c("no", "No", "NO"))
halloween$sugar_high[fixno] <- "no" # choose one name for the entry 
```

Yes:

```{r}
# find the rows that need to be corrected
fixy <- which(halloween$sugar_high %in% c("yes", "Yes"))
halloween$sugar_high[fixy] <- "yes" # choose one name for the entry 
```

Re-factor the variable and see the levels:

```{r}
halloween$sugar_high <- factor(halloween$sugar_high) # re-factor the variable
levels(halloween$sugar_high) # check to see if all the errors were rectified
```


